import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { useSelector, useDispatch } from "react-redux";
import {
  editProfile,
  editProfileWithAvatar,
} from "../../../services/UserService";
import { updateUser } from "../../../reducers/index";

const EditProfileModal = ({ onClose }) => {
  const user = useSelector((state) => state.authenReducer.user);
  const dispatch = useDispatch();

  const [userData, setUserData] = useState({
    fullName: user?.fullName || "",
    email: user?.email || "",
    phone: user?.phone || "",
    password: "",
    avatar: user?.avatar || null,
  });

  const [errors, setErrors] = useState({});
  useEffect(() => {
    // N·∫øu c√≥ th√¥ng tin ng∆∞·ªùi d√πng trong store, c·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu ban ƒë·∫ßu
    if (user) {
      console.log("Avatar nh·∫≠n ƒë∆∞·ª£c:", user.avatar);
      
      setUserData({ 
        fullName: user.fullName || "",
        email: user.email || "",
        phone: user.phone || "",
        password: "",
        avatar: user.avatar || null,
      });
    }
  }, [user]);

  useEffect(() => {
    console.log("üéØ D·ªØ li·ªáu user m·ªõi nh·∫•t:", userData);
  }, [userData]);

  const validate = (data) => {
    const errors = {};
    if (!data.fullName) errors.fullName = "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";

    if (!data.phone) {
      errors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
    } else if (!/^0\d{9}$/.test(data.phone)) {
      errors.phone = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.";
    }

    if (
      data.password &&
      !/^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&]).{6,}$/.test(data.password)
    ) {
      errors.password =
        "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±, g·ªìm ch·ªØ hoa, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.";
    }

    return errors;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUserData((prev) => ({ ...prev, [name]: value }));

    // ·∫®n l·ªói ngay khi nh·∫≠p ƒë√∫ng
    setErrors((prevErrors) => ({ ...prevErrors, [name]: "" }));
  };
  const handleSave = async () => {
    const validationErrors = validate(userData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    try {
      const formData = new FormData();
      formData.append("fullName", userData.fullName);
      formData.append("phone", userData.phone);
      if (userData.password) {
        formData.append("password", userData.password);
      }

      // Ki·ªÉm tra n·∫øu avatar l√† ƒë·ªëi t∆∞·ª£ng File
      if (userData.avatar instanceof File) {
        formData.append("avatar", userData.avatar);
      } else {
        console.error("‚ùå Avatar kh√¥ng ph·∫£i l√† file h·ª£p l·ªá:", userData.avatar);
      }

      // Debug FormData
      console.log("üì§ D·ªØ li·ªáu g·ª≠i ƒëi:");
      for (let [key, value] of formData.entries()) {
        console.log(key, value);
      }

      let response;
      if (userData.avatar instanceof File) {
        // G·ª≠i y√™u c·∫ßu ch·ªânh s·ª≠a h·ªì s∆° v·ªõi avatar
        response = await editProfileWithAvatar(user.id, userData.avatar);
      } else {
        // G·ª≠i y√™u c·∫ßu ch·ªânh s·ª≠a h·ªì s∆° kh√¥ng c√≥ avatar
        response = await editProfile(user.id, userData);
      }

      if (response) {
        // C·∫≠p nh·∫≠t user trong Redux
        dispatch(updateUser(response));

        // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu trong state c·ªßa component
        setUserData({
          fullName: response.fullName,
          email: response.email,
          phone: response.phone,
          avatar: response.avatar,
        });

        // Th√¥ng b√°o th√†nh c√¥ng
        toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        onClose();
      }

      toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng");
      onClose();
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t!");
    }
  };

  
  // const handleUpdatePremiumStatus = async (userId, isPremium) => {
  //   try {
  //     const updatedUser = await updatePremiumStatus(userId, isPremium);
      
  //     // Dispatch action ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v√†o Redux
  //     dispatch(updateUser(updatedUser));
  
  //     // C·∫≠p nh·∫≠t l·∫°i localStorage
  //     localStorage.setItem('user', JSON.stringify(updatedUser));
      
  //     console.log("Tr·∫°ng th√°i Premium ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", updatedUser);
  //   } catch (error) {
  //     console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i Premium:", error);
  //   }
  // };
  

  return (
    <div className="modal modal-thuytrang">
      <div className="modal-content">
        <h2>Ch·ªânh s·ª≠a t√†i kho·∫£n</h2>
        <input
          type="text"
          name="fullName"
          placeholder="H·ªç t√™n"
          value={userData.fullName}
          onChange={(e) => handleChange(e)}
        />
        {errors.fullName && <p className="error-message">{errors.fullName}</p>}
        <input type="email" value={userData.email} disabled />
        <input
          type="password"
          name="password"
          placeholder="M·∫≠t kh·∫©u (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi)"
          value={userData.password}
          onChange={(e) => handleChange(e)}
        />
        {errors.password && <p className="error-message">{errors.password}</p>}
        <input
          type="text"
          name="phone"
          placeholder="S·ªë ƒëi·ªán tho·∫°i"
          value={userData.phone}
          onChange={(e) => handleChange(e)}
        />
        {errors.phone && <p className="error-message">{errors.phone}</p>}
        <div className="avatar-preview">
          {userData.avatar ? (
            <img
              src={
                userData.avatar instanceof File
                  ? URL.createObjectURL(userData.avatar)
                  : userData.avatar
              }
              alt="Avatar"
              style={{
                width: 150,
                height: 120,
                objectFit: "cover",
              }}
            />
          ) : (
            <p>Ch∆∞a c√≥ ·∫£nh ƒë·∫°i di·ªán</p>
          )}
          <input
            type="file"
            accept="image/*"
            onChange={(e) => {
              if (e.target.files.length > 0) {
                console.log("File ·∫£nh ƒë∆∞·ª£c ch·ªçn:", e.target.files[0]);
                setUserData({ ...userData, avatar: e.target.files[0] });
              }
            }}
          />
        </div>

        <div className="button-group">
          <button onClick={handleSave}>L∆∞u thay ƒë·ªïi</button>
          <button onClick={onClose}>H·ªßy</button>
        </div>
      </div>
    </div>
  );
};

export default EditProfileModal;
