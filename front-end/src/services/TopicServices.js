import { get, post, patch } from "../utils/request";
import { toast } from "react-toastify";

// const BASE_URL = "http://localhost:8000";
const BASE_URL = import.meta.env.VITE_API_BASE_URL;

// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c ch·ªß ƒë·ªÅ
export const get_all_topics = async () => {
  const result = await get(`api/topics/`);
  return result;
};

export const get_number_of_topics = async (limit) => {
  const result = await get(`api/topics/get-number-of-topics?limit=${limit}`);
  return result;
};

// T·∫°o m·ªõi m·ªôt ch·ªß ƒë·ªÅ
export const create_topic = async (topicData) => {
  try {
    const response = await fetch(`${BASE_URL}api/topics/create/`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(topicData),
    });

    if (!response.ok) {
      const errorText = await response.text(); // Tr·∫£ v·ªÅ HTML l·ªói
      console.error("Server tr·∫£ v·ªÅ l·ªói:", errorText);
      toast.error("L·ªói t·∫°o ch·ªß ƒë·ªÅ (M√£: " + response.status + ")");
      return null;
    }

    const result = await response.json();
    console.log("Th√™m th√†nh c√¥ng:", result.topic);
    toast.success("T·∫°o ch·ªß ƒë·ªÅ th√†nh c√¥ng!");
    return result.topic;
  } catch (error) {
    console.error("L·ªói:", error);
    toast.error("L·ªói khi g·ªçi API!");
    return null;
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt m·ªôt ch·ªß ƒë·ªÅ theo ID
export const get_topic = async (id) => {
  const result = await get(`api/topics/${id}`);
  return result;
};

export const delete_topic_by_id = async (topicId) => {
  const url = `${BASE_URL}api/topics/${topicId}/delete/`; // URL c·ªßa API x√≥a ch·ªß ƒë·ªÅ

  const response = await fetch(url, {
    method: "DELETE", // ƒê·∫£m b·∫£o ph∆∞∆°ng th·ª©c l√† DELETE
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (response.ok) {
    console.log("X√≥a ch·ªß ƒë·ªÅ th√†nh c√¥ng");
    return await response.json();
  } else {
    const errorText = await response.text();
    console.log("L·ªói khi x√≥a ch·ªß ƒë·ªÅ:", errorText); // In ra chi ti·∫øt l·ªói
    throw new Error(`L·ªói khi x√≥a ch·ªß ƒë·ªÅ: ${response.statusText}`);
  }
};

export async function get_topic_by_id(id) {
  const response = await fetch(`${BASE_URL}/api/topics/${id}/`);
  if (!response.ok) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y ch·ªß ƒë·ªÅ theo ID");
  }
  return await response.json();
}

// C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ
export const patch_topic = async (id, data) => {
  const url = `${BASE_URL}api/topics/edit/${id}/`;

  try {
    const response = await fetch(url, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    const text = await response.text();
    console.log("Ph·∫£n h·ªìi t·ª´ server:", text);

    if (!response.ok) {
      throw new Error(`L·ªói khi c·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ: ${response.statusText}`);
    }

    try {
      return JSON.parse(text);
    } catch (e) {
      console.error("L·ªñI PARSE JSON:", e);
      throw new Error("Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá!");
    }
  } catch (err) {
    console.error("L·ªói khi g·ª≠i PATCH:", err);
    throw err;
  }
};

export async function update_topic(id, data) {
  const url = `${BASE_URL}api/topics/edit/${id}/`;

  console.log("URL g·ªçi API c·∫≠p nh·∫≠t:", url);

  try {
    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    const text = await response.text(); // ƒê·ªçc ph·∫£n h·ªìi nh∆∞ text thay v√¨ JSON
    console.log("Ph·∫£n h·ªìi t·ª´ server:", text); // üëÄ Log ƒë·ªÉ xem HTML hay JSON?

    if (!response.ok) {
      throw new Error(`L·ªói khi c·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ: ${response.statusText}`);
    }

    // Th·ª≠ ph√¢n t√≠ch JSON n·∫øu ph·∫£n h·ªìi h·ª£p l·ªá
    try {
      const jsonData = JSON.parse(text);
      return jsonData;
    } catch (e) {
      console.error("L·ªñI PARSE JSON:", e);
      throw new Error("Server kh√¥ng tr·∫£ v·ªÅ JSON ho·∫∑c c√≥ l·ªói khi c·∫≠p nh·∫≠t!");
    }
  } catch (e) {
    console.error("L·ªói khi g·ª≠i y√™u c·∫ßu:", e);
    throw new Error("C√≥ l·ªói khi g·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ!");
  }
}

export async function get_topic_by_slug(slug) {
  const response = await fetch(
    `${BASE_URL}api/topics/get-topic-by-slug/${slug}/`
  );
  if (!response.ok) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y ch·ªß ƒë·ªÅ theo slug");
  }
  return await response.json();
}
