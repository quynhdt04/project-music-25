// src/services/UserService.js

import { get, post, patch } from "../utils/request";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { clearAuthAccount } from "../actions/authen";


const BASE_URL = "http://localhost:8000";







export const loginUser = async (email, password) => {
  try {
    const response = await fetch("http://127.0.0.1:8000/user/login/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email, password }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ b·∫£ng users
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    throw error;
  }
};
// export const updateProfile = async (userId, userData) => {
//   try {
//     const response = await fetch(`http://127.0.0.1:8000/user/edit/${userId}/`, {
//       method: "PATCH",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify(userData),
//     });

//     if (!response.ok) {
//       // X·ª≠ l√Ω l·ªói ph·∫£n h·ªìi t·ª´ API m·ªôt c√°ch chi ti·∫øt h∆°n
//       const errorData = await response.json(); // L·∫•y th√¥ng tin l·ªói t·ª´ ph·∫£n h·ªìi API
//       const errorMessage =
//         errorData.message || `HTTP error! status: ${response.status}`;
//       throw new Error(errorMessage);
//     }

//     const data = await response.json();
//     toast.success("C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
//     return data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ c·∫≠p nh·∫≠t
//   } catch (error) {
//     console.error("L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", error);
//     toast.error(`L·ªói c·∫≠p nh·∫≠t h·ªì s∆°: ${error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`);
//     // T√πy ch·ªçn: X·ª≠ l√Ω l·ªói c·ª• th·ªÉ h∆°n d·ª±a tr√™n lo·∫°i l·ªói
//     if (error instanceof TypeError && error.message === "Failed to fetch") {
//       // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
//     } else if (error.message.includes("400")) {
//       // X·ª≠ l√Ω l·ªói do d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
//     }
//     throw error; // Re-throw l·ªói ƒë·ªÉ component g·ªçi h√†m n√†y c√≥ th·ªÉ x·ª≠ l√Ω ti·∫øp n·∫øu c·∫ßn
//   }
// };
// export const logout = async () => {
//     const navigate = useNavigate();
//     const dispatch = useDispatch();

//     try {
//         // N·∫øu API logout y√™u c·∫ßu GET request, h√£y s·ª≠ d·ª•ng n√≥.
//         // V√≠ d·ª•: await get("api/logout");
//         // N·∫øu kh√¥ng y√™u c·∫ßu request API, b·ªè qua b∆∞·ªõc n√†y.

//         // X√≥a th√¥ng tin ng∆∞·ªùi d√πng v√† token t·ª´ localStorage
//         localStorage.removeItem('user');
//         localStorage.removeItem('token');

//         // X√≥a c√°c th√¥ng tin kh√°c (n·∫øu c√≥)
//         // localStorage.removeItem('role');
//         // localStorage.removeItem('cart');

//         // C·∫≠p nh·∫≠t Redux store (n·∫øu c√≥)
//         dispatch(clearAuthAccount());

//         // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p ho·∫∑c trang ch·ªß
//         navigate('/'); // ho·∫∑c navigate('/login');
//         return { success: true }; // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng n·∫øu c·∫ßn
//     } catch (error) {
//         console.error("L·ªói ƒëƒÉng xu·∫•t:", error);
//         return { success: false, error: error.message || "L·ªói ƒëƒÉng xu·∫•t kh√¥ng x√°c ƒë·ªãnh." }; // Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói n·∫øu c·∫ßn thi·∫øt
//     }
// };
export async function registerUser(formData) {
  try {
    console.log("üìå D·ªØ li·ªáu FormData tr∆∞·ªõc khi g·ª≠i ƒë·∫øn server:");
    for (let pair of formData.entries()) {
      console.log(pair[0] + ": " + pair[1]);
    }

    const response = await fetch("http://127.0.0.1:8000/user/create/", {
      method: "POST",
      body: formData, // ‚úÖ G·ª≠i tr·ª±c ti·∫øp formData
    });

    if (!response.ok) {
      let errorMessage = `L·ªói ƒëƒÉng k√Ω: ${response.status}`;
      try {
        const errorData = await response.json();
        if (errorData.error) errorMessage += ` - ${errorData.error}`;
      } catch (parseError) {
        const textError = await response.text();
        errorMessage += ` - ${textError}`;
      }
      throw new Error(errorMessage);
    }

    return await response.json(); 
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    throw error;
  }
}

// export async function editProfile(_id, userData) {
//   try {
//     console.log("D·ªØ li·ªáu JSON:", JSON.stringify(userData));
//     const response = await fetch(`http://127.0.0.1:8000/update/${_id}/`, {
      
//       // Ki·ªÉm tra URL, ƒë·∫£m b·∫£o c√≥ ID ng∆∞·ªùi d√πng
//       method: "PATCH", 
//       headers: {
//         "Content-Type": "application/json",
//         // Th√™m token x√°c th·ª±c n·∫øu c·∫ßn
//         // 'Authorization': `Bearer ${token}`
//       },
//       body: JSON.stringify(userData),
//     });

//     if (!response.ok) {
//       const errorData = await response.text();
//       throw new Error(`L·ªói c·∫≠p nh·∫≠t th√¥ng tin: ${response.status} - ${errorData}`);
//     }
//     const responseData = await response.json();
//     return responseData;
//   } catch (error) {
//     console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", error);
//     throw error;
//   }
// }

// //V√≠ d·ª• s·ª≠ d·ª•ng formData ƒë·ªÉ c√≥ th·ªÉ update avatar

// export async function editProfileWithAvatar(_id, userData, avatarFile) {
//   console.log("B·∫Øt ƒë·∫ßu editProfileWithAvatar");
//   try {
//       const formData = new FormData();
//       formData.append('fullName', userData.fullName || ""); //Th√™m ki·ªÉm tra r·ªóng
//       formData.append('email', userData.email || ""); //Th√™m ki·ªÉm tra r·ªóng
//       formData.append('phone', userData.phone || ""); //Th√™m ki·ªÉm tra r·ªóng
//       //...c√°c tr∆∞·ªùng kh√°c c·ªßa userData

//       if (avatarFile && avatarFile instanceof File) {
//           formData.append('avatar', avatarFile);
//       } else {
//           console.warn("avatarFile kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng");
//       }

//       const token = localStorage.getItem('token'); // L·∫•y token n·∫øu c·∫ßn
//       const response = await fetch(`http://127.0.0.1:8000/update/${_id}/`, {
//           method: "PATCH",
//           headers: {
//               'Authorization': `Bearer ${token}` // Th√™m token n·∫øu c·∫ßn
//           },
//           body: formData,
//       });

//       if (!response.ok) {
//           let errorData;
//           if (response.headers.get('content-type')?.includes('application/json')) {
//               errorData = await response.json();
//           } else {
//               errorData = await response.text();
//           }
//           throw new Error(`L·ªói c·∫≠p nh·∫≠t th√¥ng tin: ${response.status} - ${JSON.stringify(errorData)}`);
//       }
//       const responseData = await response.json();
//       return responseData;
//   } catch (error) {
//       console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", error);
//       throw error;
//   }
// }
export async function getUserById(_id) {
  try {
    const response = await fetch(`http://127.0.0.1:8000/user/${_id}/`);
     // Ki·ªÉm tra URL
     console.log("bgvvu",_id);
    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(`L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: ${response.status} - ${errorData}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    throw error;
  }
}
export async function editProfile(userId, updatedData) {
  console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n backend:", JSON.stringify(updatedData, null, 2));

  try {
      const response = await fetch(`http://127.0.0.1:8000/update/${userId}/`, {
          method: "PUT",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),  // Chuy·ªÉn object th√†nh JSON
      });

      if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`L·ªói c·∫≠p nh·∫≠t h·ªì s∆°: ${response.status} - ${errorText}`);
      }

      return await response.json();
  } catch (error) {
      console.error(error);
      throw error;
  }
}

export async function editProfileWithAvatar(_id, userData, avatarFile) {
  try {
    const formData = new FormData();
    formData.append("fullName", userData.fullName);
    formData.append("email", userData.email);
    formData.append("phone", userData.phone);

    // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi th√¨ th√™m v√†o
    if (userData.password) {
      formData.append("password", userData.password);
    }

    // N·∫øu c√≥ ·∫£nh ƒë·∫°i di·ªán m·ªõi th√¨ th√™m v√†o
    if (avatarFile && avatarFile instanceof File) {
      formData.append("avatar", avatarFile);
    }

    console.log("üöÄ ƒêang g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t:", Object.fromEntries(formData));

    const response = await fetch(`http://127.0.0.1:8000/user/${_id}/update/`, {
      method: "PUT",
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(`L·ªói c·∫≠p nh·∫≠t h·ªì s∆°: ${response.status} - ${errorData}`);
    }

    const updatedUser = await response.json();
    console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", updatedUser);

    return updatedUser;
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", error);
    throw error;
  }
}
