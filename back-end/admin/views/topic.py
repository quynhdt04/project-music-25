from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from models.topic import Topic
from django.core.exceptions import ValidationError
from slugify import slugify 
from django.utils import timezone
from asgiref.sync import sync_to_async
import logging
import traceback
# import slugify

logger = logging.getLogger(__name__)
print(slugify("Ti√™u ƒë·ªÅ b√†i h√°t m·ªõi")) 

# L·∫•y danh s√°ch t·∫•t c·∫£ ch·ªß ƒë·ªÅ
@csrf_exempt
async def get_all_topics(request):
    if request.method == "GET":
        try:
            topics = await sync_to_async(list)(Topic.objects.all())
            data = [topic.to_dict() for topic in topics]
            return JsonResponse({"topics": data}, status=200)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)

# T·∫°o ch·ªß ƒë·ªÅ m·ªõi
@csrf_exempt
def create_topic(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            title = (data.get("title") or "").strip()
            description = (data.get("description") or "").strip()
            avatar = (data.get("avatar") or "").strip()
            status = (data.get("status") or "active").strip()

            print("D·ªØ li·ªáu nh·∫≠n t·ª´ client:", data)  # üëà Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c

            if not title:
                return JsonResponse({"error": "T√™n ch·ªß ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"}, status=400)

            if Topic.objects(title=title).first():
                return JsonResponse({"error": "T√™n ch·ªß ƒë·ªÅ ƒë√£ t·ªìn t·∫°i!"}, status=400)

            topic = Topic(
                title=title,
                slug=slugify(title),
                description=description,
                avatar=avatar,
                status=status
            )
            topic.save()

            return JsonResponse({
                "message": "T·∫°o ch·ªß ƒë·ªÅ th√†nh c√¥ng!",
                "topic": topic.to_dict()
            }, status=201)

        except ValidationError as e:
            print("ValidationError:", e)
            return JsonResponse({"error": str(e)}, status=400)
        except Exception as e:
            print("Exception x·∫£y ra:", e)
            return JsonResponse({"error": f"L·ªói h·ªá th·ªëng: {str(e)}"}, status=500)

    return JsonResponse({"error": "Invalid request"}, status=405)


# L·∫•y chi ti·∫øt ch·ªß ƒë·ªÅ theo ID
@csrf_exempt
def get_topic_by_id(request, topic_id):
    if request.method == "GET":
        try:
            topic = Topic.objects.get(id=topic_id)
            return JsonResponse({"topic": topic.to_dict()}, status=200)
        except Topic.DoesNotExist:
            return JsonResponse({"error": "Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ!"}, status=404)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request"}, status=405)


# Ch·ªânh s·ª≠a ch·ªß ƒë·ªÅ


@csrf_exempt
def update_topic(request, topic_id):
    if request.method == "PUT":
        try:
            # L·∫•y ch·ªß ƒë·ªÅ t·ª´ ID
            topic = Topic.objects.get(id=topic_id)
            
            # L·∫•y d·ªØ li·ªáu t·ª´ request body
            data = json.loads(request.body)
            
            # Ki·ªÉm tra xem title c√≥ t·ªìn t·∫°i trong data kh√¥ng
            if not data.get("title"):
                return JsonResponse({"error": "Title is required."}, status=400)
            
            # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªßa ch·ªß ƒë·ªÅ
            topic.title = data.get("title", topic.title)
            topic.slug = slugify(data.get("slug", data.get("title")))  # T·ª± ƒë·ªông t·∫°o slug t·ª´ title n·∫øu kh√¥ng c√≥ slug
            topic.avatar = data.get("avatar", topic.avatar)
            topic.description = data.get("description", topic.description)
            topic.status = data.get("status", topic.status)
            topic.updated_at = timezone.now()  # C·∫≠p nh·∫≠t th·ªùi gian

            # L∆∞u ch·ªß ƒë·ªÅ v√†o c∆° s·ªü d·ªØ li·ªáu
            topic.save()

            return JsonResponse({
    "message": "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ th√†nh c√¥ng.",
    "topic": topic.to_dict()
}, status=200)
        except Topic.DoesNotExist:
            return JsonResponse({"error": "Ch·ªß ƒë·ªÅ kh√¥ng t·ªìn t·∫°i."}, status=404)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)
    else:
        return JsonResponse({"error": "Ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá."}, status=405)

# X√≥a ch·ªß ƒë·ªÅ
@csrf_exempt
def delete_topic(request, topic_id):
    if request.method == 'DELETE':
        try:
            topic = Topic.objects.get(id=topic_id)
            topic.delete()
            return JsonResponse({"message": "Ch·ªß ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"}, status=200)
        except Topic.DoesNotExist:
            return JsonResponse({"error": "Ch·ªß ƒë·ªÅ kh√¥ng t·ªìn t·∫°i!"}, status=404)
    return JsonResponse({"error": "Ph∆∞∆°ng th·ª©c y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!"}, status=405)  

@csrf_exempt
async def get_number_of_topics(request):
    if request.method == "GET":
        try:
            # Get the number from query parameters, default to 10 if not provided
            number = int(request.GET.get('limit', 10))
            
            topics = await sync_to_async(list)(Topic.objects.all().limit(number))
            data = [topic.to_dict() for topic in topics]
            return JsonResponse({"data": data, "status": 200, "message": "L·∫•y ch·ªß ƒë·ªÅ th√†nh c√¥ng theo s·ªë l∆∞·ª£ng th√†nh c√¥ng!"}, status=200)
        except ValueError:
            return JsonResponse({"error": "Invalid limit parameter. Must be a number."}, status=400)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)
    return JsonResponse({"error": "Ph∆∞∆°ng th·ª©c y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!"}, status=405)

@csrf_exempt
async def get_topic_by_slug(request, topic_slug):
    if request.method == "GET":
        try:
            # Get the topic by slug
            topic = await sync_to_async(Topic.objects.get)(slug=topic_slug)
            # Convert to dict to access fields safely
            topic_dict = await sync_to_async(topic.to_dict)()
            return JsonResponse({"topic": topic_dict}, status=200)
        except Topic.DoesNotExist:
            return JsonResponse({"error": "Ch·ªß ƒë·ªÅ kh√¥ng t·ªìn t·∫°i!"}, status=404)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)
    return JsonResponse({"error": "Ph∆∞∆°ng th·ª©c y√™u c·∫ßu kh√¥ng h·ª£p l·ªá!"}, status=405)
